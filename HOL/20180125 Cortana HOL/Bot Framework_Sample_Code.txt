1.------------------------------------

        private async Task MessageReceivedAsync(IDialogContext context, IAwaitable<object> result)
        {
            var activity = await result as Activity;

            string message = string.Format("{0}을 주문하셨습니다. ", activity.Text);

            await context.PostAsync(message);

            context.Wait(MessageReceivedAsync);
        }


2.------ 인사 기능의 구현 


        private async Task MessageReceivedAsync(IDialogContext context, IAwaitable<object> result)
        {
            await context.PostAsync("안녕하세요 신속배달 만리장성 봇 입니다. 주문하시려는 음식을 입력해 주세요");

            context.Wait(SendWelcomeMessageAsync);
        }



3.------ 인사 기능의 구현(2)

        private async Task SendWelcomeMessageAsync(IDialogContext context, IAwaitable<object> result)
        {
            var activity = await result as Activity;

            string message = string.Format("{0}을 주문하셨습니다. 감사합니다.", activity.Text);
            await context.PostAsync(message);

            //context.Call(new NameDialog(), this.NameDialogResumeAfter);
            context.Wait(SendWelcomeMessageAsync);
        }

4.------- Dialog의 구현
	
	string WelcomeMessage = "안녕하세요 만리장석 봇입니다. 1.주문 2.FAQ 중에 선택하세요";


        private async Task SendWelcomeMessageAsync(IDialogContext context, IAwaitable<object> result)
        {
            var activity = await result as Activity;
            string selected = activity.Text.Trim();

            if (selected == "1")
            {
                await context.PostAsync("음식 주문 메뉴 입니다. 원하시는 음식을 입력해 주십시오.");
                context.Call(new OrderDialog(), DialogResumeAfter);
            }
            else if (selected == "2")
            {
                await context.PostAsync("FAQ 서비스 입니다. 질문을 입력해 주십시오.");
                context.Call(new FAQDialog(), DialogResumeAfter);
                
            }
            else
            {
                await context.PostAsync("잘못 선택하셨습니다. 다시 선택해 주십시오");
                context.Wait(SendWelcomeMessageAsync);
            }
            
        }

5.--------- Order Dialog

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using System.Threading.Tasks;
using Microsoft.Bot.Connector;
using Microsoft.Bot.Builder.Dialogs;

namespace GreatWall.Dialogs
{
    [Serializable]
    public class OrderDialog : IDialog<string>
    {
        public Task StartAsync(IDialogContext context)
        {
            context.Wait(MessageReceivedAsync);

            return Task.CompletedTask;
        }

        private async Task MessageReceivedAsync(IDialogContext context, IAwaitable<object> result)
        {
            var activity = await result as Activity;

            if (activity.Text.Trim() == "그만")
            {
                context.Done("주문완료");
            }
            else
            {
                string message = string.Format("{0}을 주문하셨습니다. 감사합니다.", activity.Text);

                await context.PostAsync(message);

                context.Wait(MessageReceivedAsync);
            }
        }
    }
}


6.---------- DialogResumeAfer( )의 추가

        private async Task DialogResumeAfter(IDialogContext context, IAwaitable<string> result)
        {
            try
            {
                string message = await result;

		await this.MessageReceivedAsync(context, result);
            }
            catch (TooManyAttemptsException)
            {
                await context.PostAsync("오류가 생겼습니다. 죄송합니다.");
            }
        }

7.----------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using System.Threading.Tasks;
using Microsoft.Bot.Connector;
using Microsoft.Bot.Builder.Dialogs;

namespace GreatWall.Dialogs
{
    [Serializable]
    public class FAQDialog : IDialog<string>
    {
        public Task StartAsync(IDialogContext context)
        {
            context.Wait(MessageReceivedAsync);

            return Task.CompletedTask;
        }

        private async Task MessageReceivedAsync(IDialogContext context, IAwaitable<object> result)
        {
            var activity = await result as Activity;

            if (activity.Text.Trim() == "그만")
            {
                context.Done("주문완료");
            }
            else
            {
                await context.PostAsync("FAQ Dialog 입니다.");

                context.Wait(MessageReceivedAsync);
            }
        }
    }
}


8.-------- Card

RootDialog.cs

        private async Task MessageReceivedAsync(IDialogContext context, IAwaitable<object> result)
        {
            await context.PostAsync(WelcomeMessage);

            var message = context.MakeMessage();

            var actions = new List<CardAction>();

            actions.Add(new CardAction() { Title = "1.주문", Value = "1" });
            actions.Add(new CardAction() { Title = "2.FAQ", Value = "2" });


            message.Attachments.Add(
                new HeroCard
                {
                    Title = "원하는 기능을 선택하세요",
                    Buttons = actions
                }.ToAttachment()
            );

            await context.PostAsync(message);

            context.Wait(SendWelcomeMessageAsync);
        }

9.-----------------------------------------------------------------
        private async Task SendWelcomeMessageAsync(IDialogContext context, IAwaitable<object> result)
        {
            var activity = await result as Activity;
            string selected = activity.Text.Trim();

            if (selected == "1")
            {
                await context.PostAsync("음식 주문 메뉴 입니다. 원하시는 음식을 입력해 주십시오.");
                context.Call(new OrderDialog(), DialogResumeAfter);
            }
            else if (selected == "2")
            {
                await context.PostAsync("FAQ 서비스 입니다. 질문을 입력해 주십시오.");
                context.Call(new FAQDialog(), DialogResumeAfter);
                
            }
            else
            {
                await context.PostAsync("잘못 선택하셨습니다. 다시 선택해 주십시오");
                context.Wait(SendWelcomeMessageAsync);
            }
            
        }

10.------------------------------------------------------------------
OrderDialog.cs

        string ServerUrl = "http://greatwallweb.azurewebsites.net/Images/";

11.--------------------------------------------------------------------

        private async Task MessageReceivedAsync(IDialogContext context, IAwaitable<object> result)
        {
            if (result != null)
            {
                var activity = await result as Activity;
                await context.PostAsync(activity.Text + "를 주문하셨습니다.");
            }
            else
                await context.PostAsync("메뉴를 선택해 주십시오");

            //자장면 출력

            //이미지 객체의 생성
            List<CardImage> menu1images = new List<CardImage>();
            menu1images.Add(new CardImage() { Url = this.ServerUrl + "menu1.JPG" });

            //버튼의 생성
            List<CardAction> menu1Buttons = new List<CardAction>();
            menu1Buttons.Add(new CardAction() { Title = "자장면", Value = "자장면" });

            HeroCard menu1Card = new HeroCard()
            {
                Title = "자장면",
                Subtitle = "전통적인 자장면 입니다.",
                Images = menu1images,
                Buttons = menu1Buttons
            };

            //짬뽕 출력

            //이미지 객체의 생성
            List<CardImage> menu2images = new List<CardImage>();
            menu2images.Add(new CardImage() { Url = this.ServerUrl + "menu2.JPG" });

            //버튼의 생성
            List<CardAction> menu2Buttons = new List<CardAction>();
            menu2Buttons.Add(new CardAction() { Title = "짬뽕", Value = "짬뽕" });

            HeroCard menu2Card = new HeroCard()
            {
                Title = "짬뽕",
                Subtitle = "시원한 국물의 짬뽕입니다.",
                Images = menu2images,
                Buttons = menu2Buttons
            };

            //탕수육 출력

            //이미지 객체의 생성
            List<CardImage> menu3images = new List<CardImage>();
            menu3images.Add(new CardImage() { Url = this.ServerUrl + "menu3.JPG" });

            //버튼의 생성
            List<CardAction> menu3Buttons = new List<CardAction>();
            menu3Buttons.Add(new CardAction() { Title = "탕수육", Value = "탕수육" });

            HeroCard menu3Card = new HeroCard()
            {
                Title = "탕수육",
                Subtitle = "부먹찍먹 모두 맛있는 탕수육 입니다.",
                Images = menu3images,
                Buttons = menu3Buttons
            };

            var message = context.MakeMessage();
            message.Attachments.Add(menu1Card.ToAttachment());
            message.Attachments.Add(menu2Card.ToAttachment());
            message.Attachments.Add(menu3Card.ToAttachment());

            await context.PostAsync(message);

            context.Wait(this.MessageReceivedAsync);
        }

12.--------------------------------------------------------------------
RootDialog.cs

        private async Task SendWelcomeMessageAsync(IDialogContext context, IAwaitable<object> result)
        {
            var activity = await result as Activity;
            string selected = activity.Text.Trim();

            if (selected == "1")
            {
                context.Call(new OrderDialog(), DialogResumeAfter);
            }
            else if (selected == "2")
            {
                await context.PostAsync("FAQ 서비스 입니다. 질문을 입력해 주십시오.");
                context.Call(new FAQDialog(), DialogResumeAfter);
                
            }
            else
            {
                await context.PostAsync("잘못 선택하셨습니다. 다시 선택해 주십시오");
                context.Wait(SendWelcomeMessageAsync);
            }
            
        }

13.----------------
OrderDialog.cs

        private async Task MessageReceivedAsync(IDialogContext context, IAwaitable<object> result)
        {
            if (result != null)
            {
                var activity = await result as Activity;

                if(activity.Text == "주문")
                {
                    await context.PostAsync("주문이 완료 되었습니다. 감사합니다.");
                    context.Done("");
                    return;
                }
                else
                    await context.PostAsync(activity.Text + "를 주문하셨습니다.");
            }
            else
                await context.PostAsync("메뉴를 선택해 주십시오");

            //메뉴 출력
            var message = context.MakeMessage();
            message.Attachments.Add(CardHelper.GetHeroCard("지금 주문", "지금 주문합니다.", this.ServerUrl + "order.jpg", "바로 주문", "주문"));
            message.Attachments.Add(CardHelper.GetHeroCard("자장면 \\2,500", "전통적인 자장면 입니다.", this.ServerUrl + "menu1.JPG", "자장면", "자장면"));
            message.Attachments.Add(CardHelper.GetHeroCard("짬뽕 \\3,000", "시원한 국물의 짬뽕입니다.", this.ServerUrl + "menu2.JPG", "짬뽕", "짬뽕"));
            message.Attachments.Add(CardHelper.GetHeroCard("탕수육 \\5,000", "부먹찍먹 모두 맛있는 탕수육 입니다.", this.ServerUrl + "menu3.JPG", "탕수육", "탕수육"));

            message.AttachmentLayout = "carousel";

            await context.PostAsync(message);

            context.Wait(this.MessageReceivedAsync);
        }


13-1 ------ /Helpers/CardHelper의 추가

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using Microsoft.Bot.Builder;
using Microsoft.Bot.Connector;

namespace GreatWall.Helpers
{
    public static class CardHelper
    {
        public static Attachment GetHeroCard(string title, string subTitle, string image, string buttonText, string buttonValue)
        {
            //이미지 객체의 생성
            List<CardImage> images = new List<CardImage>();
            images.Add(new CardImage() { Url = image });

            //버튼의 생성
            List<CardAction> buttons = new List<CardAction>();
            buttons.Add(new CardAction() { Title = buttonText, Value = buttonValue });

            HeroCard card = new HeroCard()
            {
                Title = title,
                Subtitle = subTitle,
                Images = images,
                Buttons = buttons
            };

            return card.ToAttachment();
        }

        public static Attachment GetThumbnailCard(string title, string subTitle, string image, string buttonText, string buttonValue)
        {
            //이미지 객체의 생성
            List<CardImage> images = new List<CardImage>();
            images.Add(new CardImage() { Url = image });

            //버튼의 생성
            List<CardAction> buttons = new List<CardAction>();
            buttons.Add(new CardAction() { Title = buttonText, Value = buttonValue });

            ThumbnailCard card = new ThumbnailCard()
            {
                Title = title,
                Subtitle = subTitle,
                Images = images,
                Buttons = buttons
            };

            return card.ToAttachment();
        }

        public static Attachment GetHeroCard(string title, List<ReceiptItem> items, string total, string tax, string vat, string buttonText, string buttonValue)
        {
            //버튼의 생성
            List<CardAction> buttons = new List<CardAction>();
            buttons.Add(new CardAction() { Title = buttonText, Value = buttonValue });

            ReceiptCard card = new ReceiptCard
            {
                Title = title,
                Items = items,
                Tax = tax,
                Total = total,
                Vat = vat,
                Buttons = buttons
            };

            return card.ToAttachment();
        }
    }
}

14.------- QnAMaker

                using QnaMakerApi;
                
15.-----------------------------------------------------------------

                string message = "";
                using (var client = new QnaMakerClient("633be6fd99a64f87b5cfd7d8486b568c"))
                {
                    var result = await client.GenerateAnswer(new Guid("134b8499-94c1-4804-bab1-95a2019a4aa2"), activity.Text);
                    message = result.Answers[0].Answer;
                }


16.----- LUIS

LUISDialog.cs
namespace GreatWall.Dialogs
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Web;
    using Microsoft.Bot.Builder.Dialogs;
    using Microsoft.Bot.Builder.FormFlow;
    using Microsoft.Bot.Builder.Luis;
    using Microsoft.Bot.Builder.Luis.Models;
    using Microsoft.Bot.Connector;

    [LuisModel("79cee8ff-ee05-4d9f-a3c4-8061c67be195", "45b9b62a11a04220a79d948a7a7893b4")]
    [Serializable]
    public class LUISDialog : LuisDialog<string>
    {
        [LuisIntent("")]
        [LuisIntent("None")]
        public async Task None(IDialogContext context, LuisResult result)
        {
            string message = $"죄송합니다. 말씀을 이해하지 못했습니다.";

            await context.PostAsync(message);

            context.Wait(this.MessageReceived);
        }

        [LuisIntent("Order")]
        public async Task Order(IDialogContext context, IAwaitable<IMessageActivity> activity, LuisResult result)
        {
            var message = await activity;

            EntityRecommendation menuEntityRecommendation;
            EntityRecommendation sizeEntityRecommendation;
            EntityRecommendation quantityEntityRecommendation;

            string menu = "";
            string size = "보통";
            string quantity = "한그릇";

            if(result.TryFindEntity("Menu", out menuEntityRecommendation))
            {
                menu = menuEntityRecommendation.Entity.Replace(" ", "");
            }
            else
            {
                await context.PostAsync("없는 메뉴를 선택했습니다.");
                context.Wait(this.MessageReceived);
                return;
            }

            if (result.TryFindEntity("Size", out sizeEntityRecommendation))
            {
                size = sizeEntityRecommendation.Entity.Replace(" ", "");
            }

            if (result.TryFindEntity("Quantity", out quantityEntityRecommendation))
            {
                quantity = quantityEntityRecommendation.Entity.Replace(" ", "");
            }


            await context.PostAsync($"{menu} {size} {quantity}를 주문하셨습니다.");

            context.Wait(this.MessageReceived);
        }

        [LuisIntent("Delivery")]
        public async Task Delivery(IDialogContext context, IAwaitable<IMessageActivity> activity, LuisResult result)
        {
            await context.PostAsync("출발 했습니다. 잠시만 기다려 주세요.");

            context.Wait(this.MessageReceived);
        }

        [LuisIntent("Finish")]
        public async Task Finish(IDialogContext context, IAwaitable<IMessageActivity> activity, LuisResult result)
        {
            await context.PostAsync("주문 완료 되었습니다. 감사합니다.");

            context.Done("주문완료");
        }
    }
}